{"version":3,"sources":["components/header/header.js","components/charCard.js","App.js","index.js"],"names":["Header","props","style","background","color","className","score","topScore","charCard","onClick","counterCheck","character","alt","src","imageURL","App","state","characters","shuffleCharacters","data","datacopy","i","length","j","Math","floor","random","name","correctGuess","updatedCharacters","map","updatedCharacter","selected","handleCorrect","handleIncorrect","newScore","newTopScore","max","setState","alert","resetCharacters","this","key","id","Component","ReactDOM","render","document","getElementById"],"mappings":"0PAaeA,EAXA,SAACC,GAAD,OACX,yBAAKC,MAAO,CAAEC,WAAY,OAAQC,MAAO,UAAYC,UAAW,oCAC5D,yBAAKA,UAAW,aACZ,sDACA,8CAAoBJ,EAAMK,OAC1B,4CAAkBL,EAAMM,aCKrBC,EAVE,SAACP,GAEhB,OACE,yBAAKQ,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,YAAYN,UAAU,cACjE,yBAAKO,IAAKX,EAAMU,UAAWE,IAAKZ,EAAMa,a,OC2F7BC,E,2MAzFbC,MAAQ,CACNC,aACAX,MAAO,EACPC,SAAU,G,EAQZW,kBAAoB,SAACC,GAEnB,IADA,IAAMC,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,G,EAGTV,aAAe,SAACiB,GACd,IAAIC,GAAe,EAEbC,EADiB,EAAKb,MAApBC,WAC6Ba,KAAI,SAAAnB,GACvC,IAAMoB,EAAgB,eAAQpB,GAO9B,OANIoB,EAAiBJ,OAASA,IACM,IAA9BI,EAAiBC,WACnBD,EAAiBC,UAAW,EAC5BJ,GAAe,GAGZG,KAETH,EAAe,EAAKK,cAAcJ,GAAqB,EAAKK,gBAAgBL,I,EAG9EI,cAAgB,SAAChB,GAAgB,IAAD,EACF,EAAKD,MAAzBV,EADsB,EACtBA,MAAOC,EADe,EACfA,SACT4B,EAAW7B,EAAQ,EACnB8B,EAAcZ,KAAKa,IAAIF,EAAU5B,GACvC,EAAK+B,SAAS,CACZhC,MAAO6B,EACP5B,SAAU6B,EACVnB,WAAY,EAAKC,kBAAkBD,KAEjCkB,GAAY,EAAKnB,MAAMC,WAAWK,SACpCiB,MAAM,kCACN,EAAKD,SAAS,CACZrB,WAAY,EAAKuB,gBAAgBvB,GACjCX,MAAO,M,EAKb4B,gBAAkB,SAACjB,GACjBsB,MAAM,yBACN,EAAKD,SAAS,CACZrB,WAAY,EAAKuB,gBAAgBvB,GACjCX,MAAO,K,EAIXkC,gBAAkB,SAACvB,GACjB,IAAMuB,EAAkBvB,EAAWa,KAAI,SAAAnB,GAAS,sBAAUA,EAAV,CAAqBqB,UAAU,OAC/E,OAAO,EAAKd,kBAAkBsB,I,mFA1D9BC,KAAKH,SAAS,CACZrB,WAAYwB,KAAKvB,kBAAkBuB,KAAKzB,MAAMC,gB,+BA4DxC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQX,MAAOmC,KAAKzB,MAAMV,MAAOC,SAAUkC,KAAKzB,MAAMT,WACtD,yBAAKF,UAAU,aACb,yBAAKA,UAAU,OACZoC,KAAKzB,MAAMC,WAAWa,KAAI,SAACnB,GAAD,OACzB,kBAAC,EAAD,CACE+B,IAAK/B,EAAUgC,GACfA,GAAIhC,EAAUgC,GACdhC,UAAWA,EAAUgB,KACrBK,SAAUrB,EAAUqB,SACpBlB,SAAUH,EAAUG,SACpBJ,aAAc,EAAKA,yB,GAlFjBkC,aCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7e244ec0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => (\n    <nav style={{ background: \"blue\", color: \"yellow\" }} className={\"navbar navbar-default sticky-top\"}>\n        <div className={\"container\"}>\n            <div>Simpson's Memory Game</div>\n            <div>Actual Score: {props.score}</div>\n            <div>High Score: {props.topScore}</div>\n\n        </div>\n    </nav>\n);\n\nexport default Header;","import React from 'react';\n\nconst charCard = (props) => {\n\n  return (\n    <div onClick={() => props.counterCheck(props.character)} className=\"col-3 mt-3\">\n      <img alt={props.character} src={props.imageURL} />\n    </div>\n  )\n\n}\n\nexport default charCard;","import React, { Component } from 'react';\nimport Header from './components/header/header'\nimport CharacterCard from './components/charCard'\nimport './index.css'\nimport characters from './characters.json'\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n    topScore: 0\n  };\n  componentDidMount() {\n    this.setState({\n      characters: this.shuffleCharacters(this.state.characters)\n    })\n  }\n\n  shuffleCharacters = (data) => {\n    const datacopy = [...data]\n    for (let i = datacopy.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [datacopy[i], datacopy[j]] = [datacopy[j], datacopy[i]];\n    }\n    return datacopy;\n  };\n\n  counterCheck = (name) => {\n    let correctGuess = false;\n    const { characters } = this.state;\n    const updatedCharacters = characters.map(character => {\n      const updatedCharacter = { ...character }\n      if (updatedCharacter.name === name) {\n        if (updatedCharacter.selected === false) {\n          updatedCharacter.selected = true;\n          correctGuess = true;\n        }\n      }\n      return updatedCharacter;\n    })\n    correctGuess ? this.handleCorrect(updatedCharacters) : this.handleIncorrect(updatedCharacters)\n  }\n\n  handleCorrect = (characters) => {\n    const { score, topScore } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n    this.setState({\n      score: newScore,\n      topScore: newTopScore,\n      characters: this.shuffleCharacters(characters)\n    })\n    if (newScore >= this.state.characters.length){\n      alert(\"You win the game! Good memory!\");\n      this.setState({\n        characters: this.resetCharacters(characters),\n        score: 0\n      });\n    }\n  }\n\n  handleIncorrect = (characters) => {\n    alert(\"Game over, try again!\");\n    this.setState({\n      characters: this.resetCharacters(characters),\n      score: 0\n    });\n  }\n\n  resetCharacters = (characters) => {\n    const resetCharacters = characters.map(character => ({ ...character, selected: false }))\n    return this.shuffleCharacters(resetCharacters);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.characters.map((character) =>\n              <CharacterCard\n                key={character.id}\n                id={character.id}\n                character={character.name}\n                selected={character.selected}\n                imageURL={character.imageURL}\n                counterCheck={this.counterCheck}\n              />)}\n          </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}